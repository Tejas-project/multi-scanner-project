name: Multi-Scanner Security Analysis

# Trigger the workflow on pushes, pull requests, and manual runs
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:   # allows manual trigger from GitHub UI

jobs:
  security-analysis:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Build Docker image for scanning
      - name: Build a Docker image
        uses: docker/build-push-action@v5
        with:
          context: .             # Build from repo root
          push: false            # Do not push to registry
          tags: my-app:latest    # Tag used by scanners

      # ----- Scanner Steps -----
      # Step 3: Run Trivy scanner (OS & library vulnerabilities)
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'my-app:latest'
          format: 'json'
          output: 'trivy-results.json'
          exit-code: '1'               # Fail workflow only if CRITICAL/HIGH found
          ignore-unfixed: true         # Ignore vulnerabilities that do not have fixes
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'    # Only consider high/critical for failure

      # Step 4: Run Grype (via Anchore scan-action) for container vulnerabilities
      - name: Run Anchore Vulnerability Scanner (Grype)
        uses: anchore/scan-action@v6
        with:
          image: 'my-app:latest'
          severity-cutoff: 'high'      # Fail only on HIGH/CRITICAL vulnerabilities
          output-format: 'json'
          output-file: 'grype-results.json'
          fail-build: true             # Enforce failure on high severity findings

      # Step 5: Run Hadolint for Dockerfile best practices
      - name: Run Hadolint Dockerfile Linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: 'json'
          output-file: 'hadolint-results.json'
          no-fail: true                # Never fail workflow due to lint warnings

      # ----- Archive Raw Scanner Results -----
      - name: Upload scanner reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scanner-reports
          path: |
            trivy-results.json
            grype-results.json
            hadolint-results.json

      # ----- Normalization Step -----
      # Step 6: Setup Python to run scripts
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Step 7: Normalize and deduplicate scanner outputs
      - name: Normalize scanner results
        run: |
          python scripts/normalize.py \
            --trivy trivy-results.json \
            --grype grype-results.json \
            --hadolint hadolint-results.json \
            --output normalized-results.json

      # Step 8: Upload normalized report for downstream use
      - name: Upload normalized report
        uses: actions/upload-artifact@v4
        with:
          name: normalized-report
          path: normalized-results.json

      # ----- Consensus Step -----
      # Step 9: Generate consensus findings from normalized results
      - name: Generate consensus report
        run: |
          python scripts/consensus.py \
            --input normalized-results.json \
            --output consensus-results.json

      # Step 10: Upload consensus report for analysis
      - name: Upload consensus report
        uses: actions/upload-artifact@v4
        with:
          name: consensus-report
          path: consensus-results.json

      # ----- Prioritization Step -----
      # Step 11: Assign priority scores based on severity, exploitability, and consensus
      - name: Prioritize top vulnerabilities
        run: |
          python scripts/prioritize.py \
            --input consensus-results.json \
            --output prioritized-findings.json \
            --top 10

      # Step 12: Upload prioritized findings for reporting and review
      - name: Upload prioritized report
        uses: actions/upload-artifact@v4
        with:
          name: prioritized-report
          path: prioritized-findings.json
