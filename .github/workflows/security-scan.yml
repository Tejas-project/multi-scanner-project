name: Multi-Scanner Security Analysis

# Trigger workflow on push, PR, or manual run
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:   # enables manual trigger

jobs:
  security-analysis:
    runs-on: ubuntu-latest
    steps:
      # ------------------- Checkout code -------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ------------------- Build Docker image -------------------
      - name: Build a Docker image
        uses: docker/build-push-action@v5
        with:
          context: .             # Build from repo root
          push: false            # Do not push to registry
          tags: my-app:latest    # Tag for scanners

      # ------------------- Vulnerability Scanning -------------------
      # Trivy Scanner
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'my-app:latest'
          format: 'json'
          output: 'trivy-results.json'
          exit-code: '0'          # Don't fail pipeline on low/medium
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'  # Fail only on CRITICAL/HIGH

      # Grype Scanner
      - name: Run Anchore Vulnerability Scanner (Grype)
        uses: anchore/scan-action@v6
        with:
          image: 'my-app:latest'
          severity-cutoff: 'high'      # Fail only on high & above
          output-format: 'json'
          output-file: 'grype-results.json'
          fail-build: false             # Temporarily do not fail on low/medium

      # Hadolint Dockerfile Linter
      - name: Run Hadolint Dockerfile Linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: 'json'
          output-file: 'hadolint-results.json'
          no-fail: true                # Don't fail on lint warnings

      # ------------------- Upload Raw Scanner Artifacts -------------------
      - name: Upload scanner reports
        uses: actions/upload-artifact@v4
        with:
          name: scanner-reports
          path: |
            trivy-results.json
            grype-results.json
            hadolint-results.json

      # ------------------- Normalization Step -------------------
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Normalize scanner results
        run: |
          python scripts/normalize.py \
            --trivy trivy-results.json \
            --grype grype-results.json \
            --hadolint hadolint-results.json \
            --output normalized-results.json

      - name: Upload normalized report
        uses: actions/upload-artifact@v4
        with:
          name: normalized-report
          path: normalized-results.json

      # ------------------- Consensus Step -------------------
      - name: Generate consensus report
        run: |
          python scripts/consensus.py \
            --input normalized-results.json \
            --output consensus-results.json

      - name: Upload consensus report
        uses: actions/upload-artifact@v4
        with:
          name: consensus-report
          path: consensus-results.json

      # ------------------- Prioritization Step -------------------
      - name: Prioritize top vulnerabilities
        run: |
          python scripts/prioritize.py \
            --input consensus-results.json \
            --output prioritized-findings.json \
            --top 10

      - name: Upload prioritized report
        uses: actions/upload-artifact@v4
        with:
          name: prioritized-report
          path: prioritized-findings.json

# Notes for later:
# 1. Can add Clair or other scanners by adding new steps and merging JSON in normalize.py.
# 2. Adjust severity filters to fail pipeline only for CRITICAL/HIGH when ready.
# 3. Artifact uploads can be used for automated PR comments or dashboard reporting.
